import { useState } from 'react';

function ReportViewer({ selectedReport, reportData }) {
  const [viewMode, setViewMode] = useState('formatted');

  if (!selectedReport) {
    return (
      <div className="report-viewer">
        <div className="no-report">
          <div className="no-report-icon">üìÑ</div>
          <h3>No Report Selected</h3>
          <p>Generate a report from the "Generate Reports" tab to view it here.</p>
        </div>
      </div>
    );
  }

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  const renderFormattedView = () => {
    return (
      <div className="formatted-report">
        <div className="report-header">
          <h1>{selectedReport.data.title}</h1>
          <div className="report-meta">
            <div className="meta-item">
              <span className="meta-label">Generated:</span>
              <span className="meta-value">{formatDate(selectedReport.generatedAt)}</span>
            </div>
            <div className="meta-item">
              <span className="meta-label">Type:</span>
              <span className="meta-value">{selectedReport.type}</span>
            </div>
            <div className="meta-item">
              <span className="meta-label">Format:</span>
              <span className="meta-value">{selectedReport.format}</span>
            </div>
          </div>
        </div>

        <div className="report-content">
          {selectedReport.data.sections.map((section, index) => (
            <div key={index} className="report-section">
              <h2>{section.title}</h2>
              <div className="section-content">
                {typeof section.data === 'object' ? (
                  <div className="data-grid">
                    {Object.entries(section.data).map(([key, value]) => (
                      <div key={key} className="data-item">
                        <span className="data-label">{key}:</span>
                        <span className="data-value">{value}</span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p>{section.data}</p>
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="report-footer">
          <p>Generated by EcoSwap Platform</p>
          <p>Report ID: {selectedReport.id}</p>
        </div>
      </div>
    );
  };

  const renderRawView = () => {
    return (
      <div className="raw-report">
        <pre className="raw-content">
          {JSON.stringify(selectedReport, null, 2)}
        </pre>
      </div>
    );
  };

  const renderChartView = () => {
    if (!reportData.categoryStats) {
      return <div>No chart data available</div>;
    }

    const categories = Object.entries(reportData.categoryStats);
    const total = categories.reduce((sum, [, count]) => sum + count, 0);

    return (
      <div className="chart-view">
        <h3>Category Distribution</h3>
        <div className="chart-container">
          <div className="pie-chart">
            {categories.map(([category, count], index) => {
              const percentage = ((count / total) * 100).toFixed(1);
              const color = getCategoryColor(category);
              
              return (
                <div key={category} className="chart-segment">
                  <div 
                    className="segment-bar"
                    style={{ 
                      width: `${percentage}%`,
                      backgroundColor: color 
                    }}
                  ></div>
                  <div className="segment-label">
                    <span className="segment-name">{category}</span>
                    <span className="segment-value">{count} ({percentage}%)</span>
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {reportData.monthlyData && (
          <div className="monthly-chart">
            <h3>Monthly Trends</h3>
            <div className="trend-chart">
              {reportData.monthlyData.map((month, index) => (
                <div key={index} className="month-bar">
                  <div className="bar-container">
                    <div 
                      className="bar-fill"
                      style={{ 
                        height: `${Math.max(month.items * 10, 5)}px`,
                        backgroundColor: '#00c851'
                      }}
                      title={`${month.items} items`}
                    ></div>
                  </div>
                  <div className="month-label">{month.month}</div>
                  <div className="month-value">{month.items}</div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  const getCategoryColor = (category) => {
    const colors = {
      clothing: '#e74c3c',
      electronics: '#3498db',
      furniture: '#f39c12',
      household: '#2ecc71',
      other: '#9b59b6'
    };
    return colors[category] || '#95a5a6';
  };

  const exportReport = () => {
    const content = JSON.stringify(selectedReport, null, 2);
    const blob = new Blob([content], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `report-${selectedReport.id}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const printReport = () => {
    window.print();
  };

  return (
    <div className="report-viewer">
      <div className="viewer-header">
        <h2>Report Viewer</h2>
        <div className="viewer-controls">
          <div className="view-mode-selector">
            <button
              className={`mode-btn ${viewMode === 'formatted' ? 'active' : ''}`}
              onClick={() => setViewMode('formatted')}
            >
              üìÑ Formatted
            </button>
            <button
              className={`mode-btn ${viewMode === 'chart' ? 'active' : ''}`}
              onClick={() => setViewMode('chart')}
            >
              üìä Charts
            </button>
            <button
              className={`mode-btn ${viewMode === 'raw' ? 'active' : ''}`}
              onClick={() => setViewMode('raw')}
            >
              üîß Raw Data
            </button>
          </div>
          
          <div className="viewer-actions">
            <button className="action-btn" onClick={printReport}>
              üñ®Ô∏è Print
            </button>
            <button className="action-btn" onClick={exportReport}>
              üì• Export
            </button>
          </div>
        </div>
      </div>

      <div className="viewer-content">
        {viewMode === 'formatted' && renderFormattedView()}
        {viewMode === 'chart' && renderChartView()}
        {viewMode === 'raw' && renderRawView()}
      </div>
    </div>
  );
}

export default ReportViewer;
